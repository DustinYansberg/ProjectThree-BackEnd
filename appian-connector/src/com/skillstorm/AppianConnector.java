package com.skillstorm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Base64;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import openconnector.AbstractConnector;
import openconnector.ConnectorException;
import openconnector.Filter;



/**
 * All we need this class to do is
 * 1. Pull an aggregate of accounts (users) from Appian
 * 2. Update user entitlements (groups)
 * 
 * Users are just two strings - id:name
 * Groups are just an array of strings
 * 
 * 
 * Workflow is as follows:
 * 1. Get all users - store
 * 2. Get all groups - store
 * 3. Get all users by each individual group 
 * 		- Iterate through the groups array, then pull users by group for each iteration
 * 		- Since all users are unique, overwrite any user instances with an object { "id":"name", "group":"group-name" }
 * 4. Structure remaining data as needed (add a blank group if SailPoint requires that)
 */

public class AppianConnector extends AbstractConnector
{
	
	/*
	The below values will be obtained from our xhtml file that the admin fills out
	This will obtain values from SailPoint via our configure method

	We fill authString with our access token
	the access token is generated by our Access Token URL
	We get it here in our config method, which will pull it from our form input
	The config method will then make a call the the URL and use the token generated 
	*/

	//"Bearer " + tokenValue; for Oauth2.0 headers
	private String host; //base url for API calls
	private String authString; //this will be generated BY the below URL, so we'll set it in each method when a request is made 
	private String tokenUrl;
	private String clientId;
	private String clientSecret;

	/*
		This method is called at initialization
		it sets all values for use in advance
	 */
	public void configure() throws MalformedURLException, ConnectorException
	{
		host = config.getConfig().get("host").toString();					//from a value called "host" in our xhtml
		tokenUrl = config.getConfig().get("tokenUrl").toString();			//from a value called "tokenUrl" in our xhtml
		clientId = config.getConfig().get("clientId").toString();			//from a value "clientId" in our xhtml
		clientSecret = config.getConfig().get("clientSecret").toString();	//from a value "clientSecret" in our xhtml
			//Could have the token refresh called here
			//We'll just make a method that makes the post request to the oauth2 endpoint provided in the appian document, then save the result to our authString
	

			//for making the auth token - is it a post request?
			// URL authUrl = new URL(tokenUrl);
			// HttpURLConnection authConnection = (HttpURLConnection) authUrl.openConnection();
	//THIS IS FOR GETTING THE TOKEN [ IN PROGRESS PLEASE REFACTOR AND UPDATE ]	

		try 
		{
			String tokenAuth = "Basic " +  Base64.getEncoder().encodeToString((clientId + ":" + clientSecret).getBytes());
			URL authUrl = new URL(tokenUrl + "?grant_type=client_credentials");
			HttpURLConnection authConnection = (HttpURLConnection) authUrl.openConnection();
			authConnection.setRequestMethod("POST");
			authConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
			authConnection.setRequestProperty("Authorization", tokenAuth);	//this does not overwrite the prior one
			// authConnection.setDoOutput(true); //unknown - for streaming actual body content
		
			
			// String input = "grant_type=client_credentials&client_id=" + clientId + "&client_secret=" + clientSecret;
			// authConnection.getOutputStream().write(input.getBytes());
			StringBuffer response;
			int responseCode = authConnection.getResponseCode();
			if (responseCode == HttpURLConnection.HTTP_OK) {
				BufferedReader in = new BufferedReader(new InputStreamReader(authConnection.getInputStream()));
				response = new StringBuffer();
				String line;
				while ((line = in.readLine()) != null) {
					response.append(line);
				}
				in.close();
		
				// Parse JSON response to get the access token
				ObjectMapper mapper = new ObjectMapper();
				Map<String, Object> responseMap = mapper.readValue(response.toString(), new TypeReference<Map<String, Object>>(){});
				authString = "Bearer " + responseMap.get("access_token").toString();


			} 
			else 
			{
				throw new IOException("Failed to obtain access token: " + authConnection.getResponseMessage());
			}
		}
		catch(IOException e)
		{
			throw new ConnectorException(e.getMessage());
		}
	}

	

	/**
	 * Test connection method 
	 * returns void
	 * throws ConnectorException
	 * 
	 * - This method will be used by the IIQ instance to determine whether the app is successfully connected
	 *	No functionality for this method beyond confirming a connection
	 * 	 
	 */
	@Override
	public void testConnection() throws ConnectorException
	{
		try 
		{
		
			configure();
			

			URL url = new URL(host + "/get-groups");
			HttpURLConnection connection = (HttpURLConnection) url.openConnection(); //must be cast to a more specific URL type
			
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Authorization", authString); //this appends "Authorization: " before "Bearer "
			int responseCode = connection.getResponseCode();
			if(responseCode != 200)
				throw new IOException("Could not connect: " + connection.getResponseMessage());	//printing out message for response
			else 
			{
				//reading the contents of the connection - using the connection as an input stream so we can do something with it
				//NOTE this section is mostly just for debugging purposes so we can see something in the console
				BufferedReader reader = new BufferedReader( new InputStreamReader(connection.getInputStream()));
				StringBuffer sb = new StringBuffer();
				sb.append("Response Code: " + responseCode + ", Content: ");

				String currentLine;

				while((currentLine = reader.readLine()) != null) 
				{
					sb.append(currentLine);
				}

				System.out.println(sb.toString());

				reader.close();
			}
		} 
		catch(IOException e)
		{
			throw new ConnectorException(e.getMessage());	//this fails the test in SailPoint - SailPoint will fail test if it gets a Connector Exception
		}
	}

	/**
	 * Iterate method
	 * returns an Iterator containing Maps with a String key and Object value
	 * throws ConnectorException and UnsupportedOperationException
	 * 
	 * - This method iterates through the connected application's accounts and then returns them to SailPoint
	 * - Called when Aggregate Accounts task is used in SailPoint
	 */
	@Override
	public Iterator<Map<String, Object>> iterate(Filter filter) throws ConnectorException, UnsupportedOperationException
	{	
		/**
		 * Workflow is as follows:
		 * 1. Get all users - store
		 * 2. Get all groups - store
		 * 3. Get all users by each individual group 
		 * 		- Iterate through the groups array, then pull users by group for each iteration
		 * 		- Since all users are unique, overwrite any user instances with an object { "id":"name", "group":"group-name" }
		 * 4. Structure remaining data as needed (add a blank group if SailPoint requires that)
		 */
		try
		{	
			configure(); // Ensure authString is set
        
			URL url = new URL(host + "/suite/webapi/get-all-users");
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Authorization", authString);
        
			if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) 
			{
				throw new IOException("Failed to get users: " + connection.getResponseMessage());
			}

			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			StringBuffer sb = new StringBuffer();
			String currentLine;
			
			while ((currentLine = reader.readLine()) != null) 
			{
				sb.append(currentLine);
			}
			reader.close();

			ObjectMapper mapper = new ObjectMapper();
			List<Map<String, Object>> users = mapper.readValue(sb.toString(), new TypeReference<List<Map<String, Object>>>(){});
			
			return users.iterator();
			
		} catch (IOException e) {
			throw new ConnectorException("Error retrieving users: " + e.getMessage());
		}
	}


	/**
	 * Create method
	 * 
	 * - This method creates a user account in the connected system
	 * 
	 * This is not needed. We cannot create users in the connected system due to a lack of endpoints.
	 */

	
	/**
	 * Read method
	 * 
	 * - This method gets a specific account from the connected system
	 * 
	 * Not sure if we even need this since we're only going to get all accounts
	 */
	@Override
	public Map<String, Object> read(String arg)
	{
		return null;
	}

	public Iterator<Map<String, Object>> getAllGroups() throws ConnectorException {
		try {
			configure(); // Ensure authString is set
			
			URL url = new URL(host + "/suite/webapi/get-groups");
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("GET");
			connection.setRequestProperty("Authorization", authString);
			
			if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
				throw new IOException("Failed to get groups: " + connection.getResponseMessage());
			}
	
			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			StringBuffer sb = new StringBuffer();
			String currentLine;
			
			while ((currentLine = reader.readLine()) != null) {
				sb.append(currentLine);
			}
			reader.close();
	
			ObjectMapper mapper = new ObjectMapper();
			List<Map<String, Object>> groups = mapper.readValue(sb.toString(), new TypeReference<List<Map<String, Object>>>(){});
			
			return groups.iterator();
			
		} catch (IOException e) {
			throw new ConnectorException("Error retrieving groups: " + e.getMessage());
		}
	}
	
	/**
	 * make method "update()"
	 * 
	 * get sailpoint object
	 * get groups
	 * compare to groups
	 * for any groups it does have, add that group
	 * any groups it does not have, remove that group
	 * 
	 * return sailpoint object
	 */
	

	public void addUsersToGroup(List<String> usernames, String groupName) throws ConnectorException {
		try {
			configure(); // Ensure authString is set
			
			URL url = new URL(host + "/suite/webapi/add-users-to-group");
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Authorization", authString);
			connection.setRequestProperty("Content-Type", "application/json");
			connection.setDoOutput(true);
	
			// Prepare the request body
			Map<String, Object> requestBody = new HashMap<>();
			requestBody.put("usernames", usernames);
			requestBody.put("group", groupName);
			
			ObjectMapper mapper = new ObjectMapper();
			String jsonString = mapper.writeValueAsString(requestBody);
			connection.getOutputStream().write(jsonString.getBytes());
	
			if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
				throw new IOException("Failed to add users to group: " + connection.getResponseMessage());
			}
	
			// handle the response if needed
			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			StringBuffer sb = new StringBuffer();
			String currentLine;
			while ((currentLine = reader.readLine()) != null) {
				sb.append(currentLine);
			}
			reader.close();
			System.out.println("Response from add users to group: " + sb.toString());
			
		} catch (IOException e) {
			throw new ConnectorException("Error adding users to group: " + e.getMessage());
		}
	}
	
	public void removeUsersFromGroup(List<String> usernames, String groupName) throws ConnectorException {
		try {
			configure(); // Ensure authString is set
			
			URL url = new URL(host + "/suite/webapi/remove-users-from-group");
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Authorization", authString);
			connection.setRequestProperty("Content-Type", "application/json");
			connection.setDoOutput(true);
	
			// Prepare the request body
			Map<String, Object> requestBody = new HashMap<>();
			requestBody.put("usernames", usernames);
			requestBody.put("group", groupName);
			
			ObjectMapper mapper = new ObjectMapper();
			String jsonString = mapper.writeValueAsString(requestBody);
			connection.getOutputStream().write(jsonString.getBytes());
	
			if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
				throw new IOException("Failed to remove users from group: " + connection.getResponseMessage());
			}
	
			// handle the response if needed
			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			StringBuffer sb = new StringBuffer();
			String currentLine;
			while ((currentLine = reader.readLine()) != null) {
				sb.append(currentLine);
			}
			reader.close();
			System.out.println("Response from remove users from group: " + sb.toString());
			
		} catch (IOException e) {
			throw new ConnectorException("Error removing users from group: " + e.getMessage());
		}
	}
	
	
	
}
