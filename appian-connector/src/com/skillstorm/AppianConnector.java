package com.skillstorm;

import java.util.Iterator;
import java.util.Map;

import openconnector.AbstractConnector;
import openconnector.Filter;



/**
 * All we need this class to do is
 * 1. Pull an aggregate of accounts (users) from Appian
 * 2. Update user entitlements (groups)
 * 
 * Users are just two strings - id:name
 * Groups are just an array of strings
 * 
 * 
 * Workflow is as follows:
 * 1. Get all users - store
 * 2. Get all groups - store
 * 3. Get all users by each individual group 
 * 		- Iterate through the groups array, then pull users by group for each iteration
 * 		- Since all users are unique, overwrite any user instances with an object { "id":"name", "group":"group-name" }
 * 4. Structure remaining data as needed
 */

public class AppianConnector extends AbstractConnector
{
	private String host;
	
	/*
	We fill authString with our access token
	the access token is generated by our Access Token URL
	We get it here in our config method, which will pull it from our form input
	The config method will then make a call the the URL and use the token generated 
	*/
	
	private String authString; 	

	/**
	 * Test connection method 
	 * returns void
	 * throws ConnectorException
	 * 
	 * - This method will be used by the IIQ instance to determine whether the app is successfully connected
	 *	No functionality for this method beyond confirming a connection
	 * 	 
	 */


	/**
	 * Iterate method
	 * returns an Iterator containing Maps with a String key and Object value
	 * throws ConnectorException and UnsupportedOperationException
	 * 
	 * - This method iterates through the connected application's accounts and then returns them to SailPoint
	 * - Called when Aggregate Accounts task is used in SailPoint
	 */
	@Override
	public Iterator<Map<String, Object>> iterate(Filter filter) 
	{
		return null;
	}


	/**
	 * Create method
	 * 
	 * - This method creates a user account in the connected system
	 * 
	 * This is not needed. We cannot create users in the connected system due to a lack of endpoints.
	 */

	
	/**
	 * Read method
	 * 
	 * - This method gets a specific account from the connected system
	 * 
	 * Not sure if we even need this since we're only going to get all accounts
	 */
	@Override
	public Map<String, Object> read(String arg)
	{
		return null;
	}
	
}
